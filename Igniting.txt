NPM:

 npm to share and borrow packages and to manage private development.
 npm - will download required packages.
 Execute the package with enrty point.

Parcel/Webpack:
	It is a Bundler,used to build the small scale applications.
	It makes the code..minify,cacheable,optimization,cleaning our code, dev and production build....

.parcel-cache:
	parcel has its own space to minify code.
	when we hit the npx parcel "entry-point" this file we autogenerated.
	we should keep this file in the git ignore.
	we can rename this file.

npx:
	it is same as npm
	npx = npm run start/npm run
	if we add the scripts "start" and "build" we can use the above scripts...to run the application.
	Run packages without downloading using npx.

difference between dependency and devdependency:

Dependency: It is an object that contains the library, which your project requires for production environments and functioning effectively.
It requires these packages to test and run the project on that localhost.
we can add dependencies to the package.json file by runnig command as npm install <dependencies>

devDependencies:
These packages in the package.json file that we need only for project development purposes.
These types of dependencies are required for during the web application development process but not while testing or executing it.
We can add devdependencies by using the command: npm install <dev_dependencies> ---save-Dev.


Tree Shaking: removing of the unwanted code, checks whether imported and exported files are used.

HMR:	As you we changes to code, Parcel automatically rebuilds the changed files and updates your app in the browser. By default,
 Parcel fully reloads the page, but in some cases it may perform Hot Module Replacement (HMR). HMR improves the development experience by updating modules 
in the browser at runtime without needing a whole page refresh. This means that application state can be retained as you change small things in your code.


HMR:	As you we changes to code, Parcel automatically rebuilds the changed files and updates your app in the browser. By default,
 Parcel fully reloads the page, but in some cases it may perform Hot Module Replacement (HMR). HMR improves the development experience by updating modules 
in the browser at runtime without needing a whole page refresh. This means that application state can be retained as you change small things in your code.

File watcher:

To support an optimal caching and development experience Parcel utilizes a very fast watcher, written in C++ that integrates with low-level file watching 
functionality of each operating system. Using this watcher Parcel watches every file 
in your project root (including all node_modules). Based on events and metadata from these files, Parcel determines which files need to be rebuilt.



caching:
	parcel has its own space to minify code.
	when we hit the npx parcel "entry-point" this file we autogenerated.
	we should keep this file in the git ignore.
	we can rename this file.

Package.json and Package-lock.json:

	Package.json:In this file we able to see the dependencies and devdependencies 
	in the dependencies for the modules, we can see the ^18.2.0 versions ....
	If we update the version for the module we can see that upgrade version also in the module.

Package-lock.json: it is the exact copy of the package.json here also we can visible the exact versions of the modules.
			We should not modify the package-lock.json,handled automatically by NPM

Node-Modules:A node_modules directory contains all the React dependencies packages: react ,
 react-dom , and their transitive dependencies like webpack , babal , rxjs , ESLint , etc., to build and run a React project.
No,we should not push the node_modules on git,bz it crashes the whole project and its heavy to store.

dist:holds the minified files and serves it on server, and also creates the dev build.

Browserlists: we should add this in the package.json file as array in that we should keep the last version of the chrome,firefox,internet Explorer...



	
	

